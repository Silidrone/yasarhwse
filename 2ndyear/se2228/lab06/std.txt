Question 1
-------------
Peak Finding - 1D
Given an array A with n elements, find the index i of the peak element A[i] where A[i] ≥ A[i − 1]
and A[i] ≥ A[i + 1]. For elements on the boundaries of the array, the element only needs to be
greater than or equal to its lone neighbor to be considered a peak. Or, say A[−1] = A[n] = ∞.

Is the middle element a peak?
Example : ...[1][3][5]... No
Example : ...[3][3][3]... Yes
Example : ...[7][3][5]... No
Example : ...[7][8][5]... Yes

Write a function that will return the index of ANY peak element in 1-D array,
by using divide&conquer approach.(A peak value(s) always exist in the array)

Question 2
-------------
An array with length n filled with the same values, then a single random element changed with a bigger value.
Write a function that will return the index of the different element by using divide&conquer approach.
(All values are >=0 , n is a power of 2 such as 4,32,128 etc.)

Constraints
-------------
You can not sort the arrays.

Function Templates
---------------------
//Question 1
------------------------------------------------

int question1(int array[10]){

}
------------------------------------------------

//Question2
------------------------------------------------
// startIndex included , endIndex not included
int sumOfPartialArray(int array[], int startIndex, int endIndex) {

}
// startIndex is 0, endIndex is the size of the array (4,32,128 etc.)
int question2(int array[], int startIndex, int endIndex) {

}
------------------------------------------------


